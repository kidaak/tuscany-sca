/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.    
 */

package org.apache.tuscany.sca.implementation.web;

import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tuscany.sca.assembly.ComponentReference;

/**
 * Servlet that handles the GET request for the componentContext.js script
 * 
 * The script is generated by calling ScriptProcessors to output the code 
 * for the SCA references, properties etc.
 */
public class ComponentContextServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected static final String HEADER = "/** --- Apache Tuscany componentContext.js --- */\n";
    protected static final String FOOTER = "/** --- Apache Tuscany componentContext.js EOF --- */\n";

    public static final String COMPONENT_CONTEXT_SCRIPT_URI = "org.apache.tuscany.sca.componentContext.js";

    @Override
    public void doGet(HttpServletRequest req, HttpServletResponse response) throws IOException  {
        response.setContentType("text/plain;charset=utf-8");
        OutputStream out = response.getOutputStream();

        doScriptInit(out);

        doScriptReferences(out);

        out.write(FOOTER.getBytes("UTF-8"));

        out.flush();
        out.close();
    }

    /**
     * Calls each ContextScriptProcessor once to insert any required initilization code into componentContext.js  
     */
    protected void doScriptInit(OutputStream out) throws IOException, UnsupportedEncodingException {
        out.write(HEADER.getBytes("UTF-8"));

        for (ContextScriptProcessor csp : WebSingleton.INSTANCE.getContextScriptProcessors()) {
            csp.scriptInit(out);
        }
    }

    /**
     * Calls each ContextScriptProcessor for each SCA reference to insert code for the reference into componentContext.js  
     */
    protected void doScriptReferences(OutputStream out) throws IOException, UnsupportedEncodingException {

        out.write("// SCA References\n".getBytes("UTF-8"));
        
        for (ComponentReference cr : WebSingleton.INSTANCE.getRuntimeComponent().getReferences()) {
            String ref = "// SCA Reference " + cr.getName() + "\n";
            out.write(ref.getBytes("UTF-8"));
            for (ContextScriptProcessor csp : WebSingleton.INSTANCE.getContextScriptProcessors()) {
                csp.scriptReference(cr, out);
            }
        }

        out.write("\n// SCA References end.\n".getBytes("UTF-8"));
    }

    /**
     * Calls each ContextScriptProcessor for each SCA property to insert code for the property into componentContext.js  
     */
    protected void doScriptProperties(OutputStream out) throws IOException, UnsupportedEncodingException {
        // TODO: support properties
    }

}
