/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.
package calculator.rmi;

public final class OperationsRMIServer_Stub extends java.rmi.server.RemoteStub implements calculator.rmi.OperationsRemote {
    private static final long serialVersionUID = 2;

    private static java.lang.reflect.Method $method_add_0;
    private static java.lang.reflect.Method $method_divide_1;
    private static java.lang.reflect.Method $method_multiply_2;
    private static java.lang.reflect.Method $method_subtract_3;

    static {
        try {
            $method_add_0 =
                calculator.rmi.OperationsRemote.class.getMethod("add", new java.lang.Class[] {double.class, double.class});
            $method_divide_1 =
                calculator.rmi.OperationsRemote.class.getMethod("divide",
                                                            new java.lang.Class[] {double.class, double.class});
            $method_multiply_2 =
                calculator.rmi.OperationsRemote.class.getMethod("multiply", new java.lang.Class[] {double.class,
                                                                                               double.class});
            $method_subtract_3 =
                calculator.rmi.OperationsRemote.class.getMethod("subtract", new java.lang.Class[] {double.class,
                                                                                               double.class});
        } catch (java.lang.NoSuchMethodException e) {
            throw new java.lang.NoSuchMethodError("stub class initialization failed");
        }
    }

    // constructors
    public OperationsRMIServer_Stub(java.rmi.server.RemoteRef ref) {
        super(ref);
    }

    // methods from remote interfaces

    // implementation of add(double, double)
    public double add(double $param_double_1, double $param_double_2) throws java.rmi.RemoteException {
        try {
            Object $result =
                ref.invoke(this,
                           $method_add_0,
                           new java.lang.Object[] {new java.lang.Double($param_double_1),
                                                   new java.lang.Double($param_double_2)},
                           864055858262779977L);
            return ((java.lang.Double)$result).doubleValue();
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (java.rmi.RemoteException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }

    // implementation of divide(double, double)
    public double divide(double $param_double_1, double $param_double_2) throws java.rmi.RemoteException {
        try {
            Object $result =
                ref.invoke(this,
                           $method_divide_1,
                           new java.lang.Object[] {new java.lang.Double($param_double_1),
                                                   new java.lang.Double($param_double_2)},
                           8097593626497421928L);
            return ((java.lang.Double)$result).doubleValue();
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (java.rmi.RemoteException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }

    // implementation of multiply(double, double)
    public double multiply(double $param_double_1, double $param_double_2) throws java.rmi.RemoteException {
        try {
            Object $result =
                ref.invoke(this,
                           $method_multiply_2,
                           new java.lang.Object[] {new java.lang.Double($param_double_1),
                                                   new java.lang.Double($param_double_2)},
                           -346155016949350695L);
            return ((java.lang.Double)$result).doubleValue();
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (java.rmi.RemoteException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }

    // implementation of subtract(double, double)
    public double subtract(double $param_double_1, double $param_double_2) throws java.rmi.RemoteException {
        try {
            Object $result =
                ref.invoke(this,
                           $method_subtract_3,
                           new java.lang.Object[] {new java.lang.Double($param_double_1),
                                                   new java.lang.Double($param_double_2)},
                           -610707357620578750L);
            return ((java.lang.Double)$result).doubleValue();
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (java.rmi.RemoteException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
}
