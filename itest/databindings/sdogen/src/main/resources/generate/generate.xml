<?xml version="1.0" encoding="UTF-8"?>
<!--
    * Licensed to the Apache Software Foundation (ASF) under one
    * or more contributor license agreements.  See the NOTICE file
    * distributed with this work for additional information
    * regarding copyright ownership.  The ASF licenses this file
    * to you under the Apache License, Version 2.0 (the
    * "License"); you may not use this file except in compliance
    * with the License.  You may obtain a copy of the License at
    * 
    *   http://www.apache.org/licenses/LICENSE-2.0
    * 
    * Unless required by applicable law or agreed to in writing,
    * software distributed under the License is distributed on an
    * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    * KIND, either express or implied.  See the License for the
    * specific language governing permissions and limitations
    * under the License.    
-->
<tns:Generate xmlns:tns="http://www.apache.org/tuscany/generate" 
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
              xsi:schemaLocation="http://www.example.org/generate generate.xsd ">
  <Template>
    <TemplateName>pom.xml.vm</TemplateName>
    <TemplateTargetDir>..</TemplateTargetDir>
  </Template>              
  <Template>
    <TemplateName>greeter.composite.vm</TemplateName>
    <TemplateTargetDir>classes</TemplateTargetDir>
  </Template>                
  <Template>
    <TemplateName>GreeterService.java.vm</TemplateName>
    <TemplateTargetDir>../src/main/java/org/apache/tuscany/sca/itest/sdodatabinding</TemplateTargetDir>
    <JavaPackage>org.apache.tuscany.sca.itest.sdodatabinding</JavaPackage>
  </Template>                  
  <Template>
    <TemplateName>GreeterServiceImpl.java.vm</TemplateName>
    <TemplateTargetDir>../src/main/java/org/apache/tuscany/sca/itest/sdodatabinding</TemplateTargetDir>
    <JavaPackage>org.apache.tuscany.sca.itest.sdodatabinding</JavaPackage>
  </Template>                                 
  <Template>
    <TemplateName>GreeterServiceClientImpl.java.vm</TemplateName>
    <TemplateTargetDir>../src/main/java/org/apache/tuscany/sca/itest/sdodatabinding</TemplateTargetDir>
    <JavaPackage>org.apache.tuscany.sca.itest.sdodatabinding</JavaPackage>
  </Template>                  
  <Template>
    <TemplateName>DatabindingTestCase.java.vm</TemplateName>
    <TemplateTargetDir>../src/test/java/org/apache/tuscany/sca/itest/sdodatabinding</TemplateTargetDir>
    <JavaPackage>org.apache.tuscany.sca.itest.sdodatabinding</JavaPackage>
  </Template> 
  <Template>
    <TemplateName>Greeter.wsdl.vm</TemplateName>
    <TemplateTargetDir>classes/wsdl</TemplateTargetDir>
  </Template> 
  <InputFile>
    <FileName>Person.xsd</FileName>
    <FilePath>xsd</FilePath>
    <JavaPackage>org.apache.tuscany.sca.itest.databinding.types</JavaPackage>
    <Factory>TypesFactory</Factory> 
    <Namespace>http://apache.org/tuscany/sca/itest/databinding/types</Namespace>  
    <Prefix>p</Prefix> 
    <Type>
      <TypeName>PersonType</TypeName>
      <CreateTypeCode>
        TypesFactory factory = TypesFactory.INSTANCE;
        param = factory.createPersonType();
        param.setFirstName("George");
        param.setLastName("Doors");
      </CreateTypeCode>
      <ModifyTypeCode>
        param.setGreeting("Hello");
      </ModifyTypeCode>
      <ResultComparison>
        assertNotSame("greetedPerson.getGreeting() not set", "", result.getGreeting());
      </ResultComparison>      
    </Type>
  </InputFile>
  <InputFile>
    <FileName>Interop.xsd</FileName>
    <FilePath>xsd</FilePath>
    <JavaPackage>org.apache.tuscany.interop</JavaPackage>  
    <Factory>InteropFactory</Factory>
    <Namespace>http://www.apache.org/tuscany/interop</Namespace>  
    <Prefix>i</Prefix>
    <!-- Type>
      <TypeName>AnnotationComplexType</TypeName>
      <CreateTypeCode>
        InteropFactory factory = InteropFactory.INSTANCE;
        param = factory.createAnnotationComplexType();
        param.setSimpleTypeWithNameElement("SomeText");
       </CreateTypeCode>
      <ModifyTypeCode>
        param.setSimpleTypeWithNameElement("SomeChangedText");;
      </ModifyTypeCode>
      <ResultComparison>
        assertEquals("data not changed corretly", "SomeChangedText", result.getSimpleTypeWithNameElement());
      </ResultComparison>      
    </Type-->  
    <Type>
      <TypeName>AttributeComplexType</TypeName>
      <CreateTypeCode>
        InteropFactory factory = InteropFactory.INSTANCE;
        org.apache.tuscany.interop.AttributeType attrib = factory.createAttributeType();
        attrib.setAttribute("SomeText");
        param = factory.createAttributeComplexType();
        param.setAttributeElement(attrib);
       </CreateTypeCode>
      <ModifyTypeCode>
        param.getAttributeElement().setAttribute("SomeChangedText");;
      </ModifyTypeCode>
      <ResultComparison>
        assertEquals("data not changed corretly", "SomeChangedText", result.getAttributeElement().getAttribute());
      </ResultComparison>      
    </Type> 
    <Type>
      <TypeName>AttributeReferenceComplexType</TypeName>
      <CreateTypeCode>
        InteropFactory factory = InteropFactory.INSTANCE;
        param = factory.createAttributeReferenceComplexType();
        
        param.setReferencedAttribute("SomeText");
       </CreateTypeCode>
      <ModifyTypeCode>
        param.setReferencedAttribute("SomeChangedText");;
      </ModifyTypeCode>
      <ResultComparison>
        assertEquals("data not changed corretly", "SomeChangedText", result.getReferencedAttribute());
      </ResultComparison>      
    </Type>      
    <Type>
      <TypeName>SimpleTypeWithAbstractComplexType</TypeName>
      <CreateTypeCode>
        InteropFactory factory = InteropFactory.INSTANCE;
        param = factory.createSimpleTypeWithAbstractComplexType();
        param.setSimpleTypeWithAbstractExtensionElement("SomeText");
       </CreateTypeCode>
      <ModifyTypeCode>
        param.setSimpleTypeWithAbstractExtensionElement("SomeChangedText");;
      </ModifyTypeCode>
      <ResultComparison>
        assertEquals("data not changed corretly", "SomeChangedText", result.getSimpleTypeWithAbstractExtensionElement());
      </ResultComparison>      
    </Type>            
    <Type>
      <TypeName>SimpleTypeWithNameComplexType</TypeName>
      <CreateTypeCode>
        InteropFactory factory = InteropFactory.INSTANCE;
        param = factory.createSimpleTypeWithNameComplexType();
        param.setSimpleTypeWithNameElement("SomeText");
       </CreateTypeCode>
      <ModifyTypeCode>
        param.setSimpleTypeWithNameElement("SomeChangedText");;
      </ModifyTypeCode>
      <ResultComparison>
        assertEquals("data not changed corretly", "SomeChangedText", result.getSimpleTypeWithNameElement());
      </ResultComparison>      
    </Type> 
    <Type>
      <TypeName>ComplexTypeWithContentType</TypeName>
      <CreateTypeCode>
        InteropFactory factory = InteropFactory.INSTANCE;
        param = factory.createComplexTypeWithContentType();
        param.setSimpleTypeWithName("SomeText");
       </CreateTypeCode>
      <ModifyTypeCode>
        param.setSimpleTypeWithName("SomeChangedText");;
      </ModifyTypeCode>
      <ResultComparison>
        assertEquals("data not changed corretly", "SomeChangedText", result.getSimpleTypeWithName());
      </ResultComparison>      
    </Type> 
  </InputFile>  
</tns:Generate>
