<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.    
-->
<!-- Tests that that where a <component/> <property/> has @many=false that 
     there is only one <value/> child element of the <property/>   -->
<composite xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200712"
           targetNamespace="http://oasis/tests"
           xmlns:tns="http://oasis/tests"
           xmlns:test="http://oasis/tests"
           name="TEST_ASM_0029">
           
    <component name="TestClient">
		<implementation.composite name="tns:TestClient_0002"/>
		<service name="TestInvocation">
			<interface.java interface="test.TestInvocation"/>
            <binding.ws/>
		</service>
        <reference name="reference1" target="TestComponent1/Service1" />
        <property name="testName">ASM_0029</property>
    </component>
    
    <component name="TestComponent1">
		<implementation.composite name="tns:TestComposite12"/>
        <service name="Service1">
        	<interface.java interface="test.Service1"/>
        </service>
        <property name="serviceName">service1</property>
        <!-- Property with complex type with many=false but 2 <value/>
             subelements - which is an error -->
        <property name="complexType" type="test:ComplexType1">
        	<value>
        		<test:firstData>SomeData</test:firstData>
        		<test:secondData>MoreData</test:secondData>
        	</value>
        	<value>        	
        		<test:firstData>SomeData2</test:firstData>
        		<test:secondData>MoreData2</test:secondData>  	
        	</value>
        </property>
    </component> 
    
</composite>
